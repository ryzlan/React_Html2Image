{"version":3,"sources":["component/OptionsList.jsx","component/CardList.jsx","component/ShowData.jsx","App.js","serviceWorker.js","index.js"],"names":["OptionsList","state","CreateOptionsList","option","id","answer","react_default","a","createElement","key","className","renderOptionsList","this","props","answers","map","Component","CardList","_this$props$data$ques","data","question","ref","component_OptionsList","ShowData","CreateList","component_CardList","renderdata","datas","App","flag","error","canvasConverter","node","Promise","resolve","reject","domtoimage","toPng","then","dataUrl","catch","renderConverter","arr","jsondata","forEach","element","push","nodes","e","document","getElementById","promises","n","_this","all","i","length","filename","download","err","console","setState","class","role","component_ShowData","converter","type","onClick","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f6408c13.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nclass OptionsList extends Component {\r\n    state = {  }\r\n\r\n    CreateOptionsList=(option)=>{\r\n        const {id , answer } = option ;\r\n        return (\r\n            <li key={id} className=\"\">\r\n                <p className=\"option\">\r\n                    {answer}\r\n                </p>\r\n                \r\n            </li>\r\n        )\r\n    }\r\n    render() { \r\n\r\n        const renderOptionsList = this.props.answers.map(this.CreateOptionsList)\r\n        return (\r\n         <ul className=\"options\">\r\n            {renderOptionsList}\r\n        </ul>\r\n      );\r\n    }\r\n}\r\n \r\nexport default OptionsList;","import React, { Component } from 'react';\r\n\r\n\r\nimport OptionsList from './OptionsList';\r\n\r\nclass CardList extends Component {\r\n    state = {  }\r\n    render() { \r\n         const {id ,question } = this.props.data.question ;\r\n         \r\n        return (\r\n            <div className=\"col-6 col-md-4 row-eq-height bg-card\">\r\n            <div id={id} ref={id} className=\"card cards\" >\r\n\r\n            <div className=\"card-body question\">\r\n              <p className=\"card-text questions\">\r\n               {question}\r\n              </p>\r\n              \r\n            </div>\r\n            <OptionsList  answers={this.props.data.answers}/>\r\n          </div>\r\n          </div>\r\n        );\r\n    }\r\n}\r\n \r\nexport default CardList;","import React, { Component } from 'react';\r\nimport CardList from './CardList';\r\n\r\n\r\nclass ShowData extends Component {\r\n\r\n    CreateList=(data)=>{\r\n        return (\r\n         <CardList key={data.question.id} data={data} />\r\n        )\r\n    }\r\n\r\n    render() { \r\n        const renderdata = this.props.datas.map(this.CreateList);\r\n        return (\r\n        <div className=\"row row-eq-height\">\r\n\r\n        {renderdata}\r\n        \r\n        </div>  \r\n        );\r\n    }\r\n}\r\n \r\nexport default ShowData;","import React, { Component } from 'react';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport '../node_modules/font-awesome/css/font-awesome.min.css'; \nimport 'react-awesome-button/dist/styles.css';\n\n\nimport jsondata from './data/data.json';\nimport ShowData  from './component/ShowData';\nimport domtoimage from 'dom-to-image';\nimport download from 'downloadjs';\n\n\nclass App extends Component {\n\n  state={\n    flag:false,\n    error:''\n  }\n   canvasConverter=(node)=>{\n    return new Promise((resolve , reject) =>{\n        \n        domtoimage.toPng(node)\n            .then(function(dataUrl){\n                return resolve(dataUrl) ;\n            })\n            .catch(function(error){\n                return reject(error);\n            })\n    })\n}\n\n\n  renderConverter=()=>{\n    let arr = [];\n    jsondata.forEach(element => {\n      arr.push(element.question.id);\n    });\n\n\n    let nodes =[];\n    arr.forEach(e =>{\n      nodes.push(document.getElementById(e));\n    })\n \n    let promises = [];\n    nodes.forEach( n =>{\n        promises.push(this.canvasConverter(n));\n    })\n    \n \n\n    Promise.all(promises)\n    .then((data)=>{\n        \n        for (let i = 0; i < data.length; i++) {\n           var filename = \"image\"+i+\".png\" ; \n            download(data[i] , filename);\n        }\n    })\n    .catch((err)=>{\n        console.error(err);\n        this.setState({\n          flag:true,\n          error:\"Something went terribly Wrong !! \"\n        })\n\n    })\n        \n  }\n\n  render() {\n    return (\n      <div className=\"container bg\">\n      {this.state.flag ?\n           <div class=\"alert alert-danger\" role=\"alert\">\n            This is a danger alertâ€”check it out!\n            </div> : ''}\n\n        <ShowData datas={jsondata}  converter={this.renderConverter}/>\n      \n        <div>\n        <button type=\"button\" className=\"block\" onClick={this.renderConverter} >\n        <span className=\"fa fa-download fa-3x icons\"></span></button>\n        </div>\n        \n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}