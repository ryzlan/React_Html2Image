{"version":3,"sources":["img/logo.png","component/OptionsList.jsx","component/CardList.jsx","component/ShowData.jsx","component/Loading.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","OptionsList","state","CreateOptionsList","option","id","answer","react_default","a","createElement","key","className","renderOptionsList","this","props","answers","map","Component","CardList","_this$props$data$ques","data","question","ref","component_OptionsList","src","require","alt","ShowData","CreateList","component_CardList","renderdata","datas","Loading","App","loading","flag","error","canvasConverter","node","Promise","resolve","reject","domtoimage","toSvg","then","dataUrl","catch","renderConverter","arr","_this","forEach","element","push","nodes","e","document","getElementById","promises","n","all","i","length","filename","download","err","console","setState","jsondata","renderError","class","role","component_Loading","component_ShowData","converter","type","onClick","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.267591d0.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.c055d5fb.png\";","import React, { Component } from 'react';\r\n\r\nclass OptionsList extends Component {\r\n    state = {  }\r\n\r\n    CreateOptionsList=(option)=>{\r\n        const {id , answer } = option ;\r\n        return (\r\n            <li key={id} className=\"\">\r\n                <p className=\"option\">\r\n                   <span>{answer}</span> \r\n                </p>\r\n                \r\n            </li>\r\n        )\r\n    }\r\n    render() { \r\n\r\n        const renderOptionsList = this.props.answers.map(this.CreateOptionsList)\r\n        return (\r\n         <ul className=\"options\">\r\n            {renderOptionsList}\r\n        </ul>\r\n      );\r\n    }\r\n}\r\n \r\nexport default OptionsList;","import React, { Component } from 'react';\r\n\r\nimport OptionsList from './OptionsList';\r\n\r\nclass CardList extends Component {\r\n    state = {  }\r\n    render() { \r\n         const {id ,question } = this.props.data.question ;\r\n         \r\n        return (\r\n            <div className=\"card-wrapper\" id={id} ref={id}>\r\n              <div className=\"cards\" >\r\n                <div className=\"card-body question\">\r\n                    <p className=\"card-text questions\">\r\n                    {question}\r\n                    </p>\r\n                </div>\r\n                <OptionsList  answers={this.props.data.answers}/>\r\n              </div>\r\n              <div>\r\n                <img className=\"logo\" src={require('../img/logo.png')} alt=\"logo\" />\r\n              </div>\r\n              \r\n          </div>\r\n        );\r\n    }\r\n}\r\n \r\nexport default CardList;","import React, { Component } from 'react';\r\nimport CardList from './CardList';\r\n\r\n\r\nclass ShowData extends Component {\r\n\r\n    CreateList=(data)=>{\r\n        return (\r\n         <CardList key={data.question.id} data={data} />\r\n        )\r\n    }\r\n\r\n    render() { \r\n        const renderdata = this.props.datas.map(this.CreateList);\r\n        return (\r\n        <div className=\"Aligner\">\r\n\r\n        {renderdata}\r\n        \r\n        </div>  \r\n        );\r\n    }\r\n}\r\n \r\nexport default ShowData;","import React, { Component } from 'react';\r\n\r\nclass Loading extends Component {\r\n    state = {  }\r\n    render() { \r\n        return ( \r\n            <div className=\"loadsBg\">\r\n                <h1 className=\"loads\">Loading ....</h1>\r\n            <div className=\"loader\">\r\n                <span></span>\r\n                <span></span>\r\n                <span></span>\r\n                <span></span>\r\n            </div>\r\n\r\n            </div>\r\n         );\r\n    }\r\n}\r\n \r\nexport default Loading;","import React, { Component } from 'react';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport '../node_modules/font-awesome/css/font-awesome.min.css'; \nimport 'react-awesome-button/dist/styles.css';\n\n\nimport jsondata from './data/data.json';\nimport ShowData  from './component/ShowData';\nimport Loading from './component/Loading';\n\n\nimport domtoimage from 'dom-to-image';\nimport download from 'downloadjs';\n\n\n\nclass App extends Component {\n\n  state={\n    loading:false,\n    flag:false,\n    error:'', \n    data:[]\n  }\n  componentDidMount(){\n    this.setState({\n      data:jsondata\n    })\n  }\n\n   canvasConverter=(node)=>{\n    return new Promise((resolve , reject) =>{\n        domtoimage.toSvg(node)\n            .then(function(dataUrl){\n                return resolve(dataUrl) ;\n            })\n            .catch(function(error){\n                return reject(error);\n            })\n    })\n}\n\n\n  renderConverter=()=>{\n    // this.setState({\n    //   loading:true\n    // })\n    let arr = [];\n    this.state.data.forEach(element => {\n      arr.push(element.question.id);\n    });\n\n\n    let nodes =[];\n    arr.forEach(e =>{\n      nodes.push(document.getElementById(e));\n    })\n \n    let promises = [];\n    nodes.forEach( n =>{\n        promises.push(this.canvasConverter(n));\n    })\n    \n \n\n    Promise.all(promises)\n    .then((data)=>{\n        \n        for (let i = 0; i < data.length; i++) {\n           var filename = \"image\"+i+\".svg\" ; \n            download(data[i] , filename);\n        }\n\n       return ;\n        \n    })\n    .catch((err)=>{\n        console.error(err);\n        this.setState({\n          flag:true,\n          error:\"Something went terribly Wrong !! \"\n        })\n\n    });\n    \n        \n  }\n\n  render() {\n    let renderError= (<div class=\"alert alert-danger\" role=\"alert\">\n    {this.state.error}\n  </div> );\n\n    return (\n      <div className=\"container bd\">\n      \n      {this.state.flag ? {renderError}  : ''}\n      {this.state.loading ?\n      <Loading /> :\n\n      <div className=\"render\">\n        <h1 className=\"white\">React HTML2Image Converter</h1>\n          <ShowData datas={this.state.data}  converter={this.renderConverter} />\n        \n          <div>\n          <button type=\"button\" className=\"block\" onClick={this.renderConverter} >\n          <span className=\"fa fa-download fa-3x icons\"></span></button>\n          </div>\n        </div>\n      }\n        \n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}